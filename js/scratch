var $ = require('jquery');
var R = require('ramda');
var ace = require('brace');

window.R = R;

require('brace/mode/javascript');
require('brace/theme/dawn');
require('brace/ext/split.js');

var l_p = require('./leiden_plus.js');

var Split = ace.acequire("ace/ext/split").Split;
var container = document.getElementById("leiden-plus-editor");
var theme = ace.acequire("ace/theme/dawn");

var env = {};

var split = new Split(container, theme, 1);
env.editor = split.getEditor(0);

split.on("focus", function(editor) {
    env.editor = editor;
    //updateUIEditorOptions();
});

env.split = split;
window.env = env;

/* Template formatting */
// bracesWrap :: String -> String
const bracesWrap = (x) => `{${x}}`;

// replaceLangPlaceholder :: (String, String, String) -> String
const replaceLangPlaceholder = (placeholder, insert, template) => template.replace(bracesWrap(placeholder), insert); 

// renderer :: Object -> Function 
const render = (a) => R.compose(R.apply(R.compose), R.map(R.partial(replaceLangPlaceholder)))(R.toPairs(a))

/* Insertion  */

element_insert = function (editor, lang_elem) {
    return function () {
            var t = editor.getSelectedText();
            var at = R.propOr("", "attr", lang_elem);
            var al = "";
            editor.insert(render({text:t, attr:at,alt:al})(lang_elem.template));
            editor.focus();
        };
    };

/*
 * UI element section
 */

// elemVariants :: String => Object => [Object]
const elemVariants = p => obj => R.map(R.merge(R.dissoc(p,obj)), R.map(R.objOf(p), R.prop(p, obj)));

// constructVariants:: String => [Object] => [Object]
const constructVariants = (a) => R.chain(R.when(R.prop(a), elemVariants(a)))

// strip :: String -> String
const strip = R.replace(/\W/g,'');

const ifProp = (a) => R.propOr("", a);

const ifAttr = R.compose(strip, ifProp("attr"));

// buttonObj
const button = a => f => ({text:`${a.name} ${ifAttr(a)}`, id: `button_${a.name+ifAttr(a)}`, class:'btn btn-default', click: f});

// createButton :: Object => Object
const createButton = (b) => $('<button/>', b);

// addTo :: Object => Object 
const addTo = obj => elem => obj.append(elem);

const createUI = function (editor, loc, lang) {
    addTo(loc)(createButton(button({name:"Convert to Epidoc"})(convertLeiden(translationLPtoED(editor.getValue())))));
    R.map(R.compose(addTo(loc), 
                createButton, 
                R.converge(R.call, [button, R.partial(element_insert, [editor])])
               ), constructVariants('attr')(lang.elements));
};



createUI(env.editor, $('#leiden-plus-control'), l_p);

env.editor.setOptions({ 
    fontSize: 16,
    maxLines: 200,
    showPrintMargin: false,
    theme: 'ace/theme/dawn',
    wrapBehavioursEnabled: true, 
    showInvisibles: true,
});

session = env.editor.getSession();
session.setUseWrapMode(true);
session.setWrapLimitRange();

// twoSplit :: Object AceSplit => Boolean
const twoSplits = (split) => (split.getSplits() == 2 ? true : false);

// setSplit :: Int => Object AceSplit => IO DOM
const setSplit = n => split => split.setSplits(n);

// toggleSplit :: Object AceSplit => IO DOM
const toggleSplit = R.ifElse(twoSplits, setSplit(1), setSplit(2));

// ajaxCORSPost :: (String, Function, Function) => String
const ajaxCORSPost = (u, s, e) => (d) => $.ajax({url:u, type:"POST", crossDomain:true, data:d, dataType:"json", success:s, error:e});

// xsugarPostData :: (String, String) => String => Object
const xsugarPostData = (dir, type) => data => { return {content: data, direction: dir, type: type}};

const translationLPtoED = xsugarPostData("nonxml2xml","translation_epidoc"); 

// getException :: Object xsugarResponse -> Object xsugarException
const getException = R.prop('exception');

// getContent :: Object xsugarResponse -> String
const getContent = R.prop('content');

// toAceAnnotation :: Object xsugarException -> Object aceAnnotation
const toAceAnnotation = (e) => { return {column:e.column, raw:e.cause, row:e.line-1, text:e.cause, type:"error"}};

//
const toList = R.ifElse(R.is(Array), R.identity, R.of);

// 
const setAnnotations = editor => annotations => editor.getSession().setAnnotations(annotations);

const toAceAnnotations = (a) => R.map(toAceAnnotation, toList(a))

const setResponseErrors = R.compose(setAnnotations(env.editor), toAceAnnotations, getException);

const openXMLInSplit = (t) => [toggleSplit(env.split), setEditorText(env.split.$editors[1])(getContent(t))];

const formatResponse = R.ifElse(R.has('exception'), setResponseErrors, openXMLInSplit);

const setEditorText = ed => t => ed.setValue(t);

/*
Request Parameters:
* `content`: contains the XML or Leiden+
* `type`: contains a string identifying the XSugar grammar to use (so we
  can use this for e.g. translation Leiden as well)
* `direction`: `xml2nonxml` or `nonxml2xml`
*/

var dc3_xsugar_url = "http://libdc3-dev-03.oit.duke.edu/xsugar/";

var convertLeiden = ajaxCORSPost(dc3_xsugar_url, formatResponse, logIt);
